#!/usr/bin/env bash

# Color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
NC='\033[0m' # No color

show_help() {
    echo -e "${CYAN}Package Search & Compare Tool${NC}"
    echo -e "${CYAN}Usage:${NC} $0 [options] <package-name>"
    echo -e ""
    echo -e "${YELLOW}Options:${NC}"
    echo -e "  ${GREEN}-s${NC}        Search for package in all package managers"
    echo -e "  ${GREEN}-i${NC}        List installed status only"
    echo -e "  ${GREEN}-h${NC}        Show this help message"
    echo -e ""
    echo -e "${CYAN}Example:${NC} $0 -s wget"
}

check_apt() {
    pkg="$1"
    if apt-cache show "$pkg" &>/dev/null; then
        if dpkg -s "$pkg" &>/dev/null; then
            version=$(dpkg -s "$pkg" | grep '^Version:' | awk '{print $2}')
            echo -e "${GREEN}APT:${NC} $pkg (${CYAN}$version${NC})"
        else
            version=$(apt-cache show "$pkg" | grep -m1 '^Version:' | awk '{print $2}')
            echo -e "${YELLOW}APT:${NC} $pkg (${version}) ${RED}[Not Installed]${NC}"
        fi
    else
        echo -e "${RED}APT:${NC} $pkg [Not Found]"
    fi
}

check_brew() {
    pkg="$1"
    if ! command -v brew >/dev/null 2>&1; then
        echo -e "${RED}Homebrew:${NC} brew command not found"
        return
    fi

    if brew info --json "$pkg" &>/dev/null; then
        version=$(brew info --json "$pkg" | jq -r '.[0].versions.stable')
        if brew list --formula | grep -qx "$pkg"; then
            echo -e "${GREEN}Homebrew:${NC} $pkg (${CYAN}$version${NC})"
        else
            echo -e "${YELLOW}Homebrew:${NC} $pkg (${version}) ${RED}[Not Installed]${NC}"
        fi
    else
        echo -e "${RED}Homebrew:${NC} $pkg [Not Found]"
    fi
}

check_flatpak() {
    pkg="$1"
    list=$(flatpak search "$pkg" --columns=application 2>/dev/null | grep -w "$pkg" | head -n1)
    if [ -n "$list" ]; then
        if flatpak info "$pkg" &>/dev/null; then
            version=$(flatpak info "$pkg" | grep -E '^Version:' | awk '{print $2}')
            echo -e "${GREEN}Flatpak:${NC} $pkg (${CYAN}$version${NC})"
        else
            echo -e "${YELLOW}Flatpak:${NC} $pkg ${RED}[Not Installed]${NC}"
        fi
    else
        echo -e "${RED}Flatpak:${NC} $pkg [Not Found]"
    fi
}

check_snap() {
    pkg="$1"
    if snap info "$pkg" &>/dev/null; then
        version=$(snap info "$pkg" | awk '/^latest/{print $2; exit}')
        if snap list "$pkg" &>/dev/null; then
            installed_ver=$(snap list "$pkg" | awk -v p="$pkg" '$1 == p {print $2}')
            echo -e "${GREEN}Snap:${NC} $pkg (${CYAN}$installed_ver${NC})"
        else
            echo -e "${YELLOW}Snap:${NC} $pkg (${version}) ${RED}[Not Installed]${NC}"
        fi
    else
        echo -e "${RED}Snap:${NC} $pkg [Not Found]"
    fi
}

main() {
    SEARCH=0
    INSTALLED=0

    while getopts ":hsi" opt; do
        case $opt in
            h)
                show_help
                exit 0
                ;;
            s)
                SEARCH=1
                ;;
            i)
                INSTALLED=1
                ;;
            \?)
                echo -e "${RED}Invalid option: -$OPTARG${NC}" >&2
                show_help
                exit 1
                ;;
        esac
    done
    shift $((OPTIND - 1))

    if [ -z "$1" ]; then
        echo -e "${RED}Error: No package name provided.${NC}"
        show_help
        exit 1
    fi

    pkg="$1"

    echo -e "${CYAN}Checking package:${NC} ${YELLOW}$pkg${NC}"
    echo -e "------------------------------"

    if [[ $SEARCH -eq 1 ]]; then
        check_apt "$pkg"
        check_brew "$pkg"
        check_flatpak "$pkg"
        check_snap "$pkg"
    elif [[ $INSTALLED -eq 1 ]]; then
        dpkg -s "$pkg" &>/dev/null && check_apt "$pkg"
        brew list --formula | grep -qx "$pkg" && check_brew "$pkg"
        flatpak info "$pkg" &>/dev/null && check_flatpak "$pkg"
        snap list "$pkg" &>/dev/null && check_snap "$pkg"
    else
        # Default behavior: do full check like -s
        check_apt "$pkg"
        check_brew "$pkg"
        check_flatpak "$pkg"
        check_snap "$pkg"
    fi
}

main "$@"
